[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yushi Han. Author. Gaël Millot. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Han Y, Millot G (2024). saferGraph: Classical graphic handling. R package version 1.0.","code":"@Manual{,   title = {saferGraph: Classical graphic handling},   author = {Yushi Han and Gaël Millot},   year = {2024},   note = {R package version 1.0}, }"},{"path":[]},{"path":"/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of content","title":"Classical graphic handling","text":"Description Content Versions Installation Licence Citations Credits Acknowledgements","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Classical graphic handling","text":"Set R functions development R functions, written according safer project specifications.","code":""},{"path":"/index.html","id":"content","dir":"","previous_headings":"","what":"Content","title":"Classical graphic handling","text":"Read vignette(\"saferGraph\") details.","code":""},{"path":"/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"Classical graphic handling","text":"different saferGraph releases tagged .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Classical graphic handling","text":"saferGraph can currently installed GitHub: Older versions can installed like :","code":"install.packages(\"remotes\") remotes::install_github(\"https://github.com/safer-r/saferGraph\") v <- \"v1.0\" # desired tag version remotes::install_github(paste0(\"https://github.com/safer-r/saferGraph/tree/\", v))"},{"path":"/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Classical graphic handling","text":"package can redistributed /modified terms GNU General Public License published Free Software Foundation, either version 3 License, (option) later version. Distributed hope useful, without warranty; without even implied warranty merchandability fitness particular purpose. See GNU General Public License details https://www.gnu.org/licenses.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Classical graphic handling","text":"using functions saferGraph, please cite: Han Y, Serizay J, Millot GA (2023). R saferGraph package. https://github.com/safer-r/saferGraph/.","code":""},{"path":"/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Classical graphic handling","text":"Yushi Han, Bioinformatics Biostatistics Hub, Institut Pasteur, Paris, France Jacques Serizai, Spatial Regulation Genomes team, Institut Pasteur, Paris, France Gael . Millot, Bioinformatics Biostatistics Hub, Institut Pasteur, Paris, France","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Classical graphic handling","text":"developers & maintainers mentioned softwares packages, including: R Git Github","code":""},{"path":"/reference/close2.html","id":null,"dir":"Reference","previous_headings":"","what":"close2 — close2","title":"close2 — close2","text":"Close specific graphic windows (devices).","code":""},{"path":"/reference/close2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"close2 — close2","text":"","code":"close2(kind = \"pdf\", return.text = FALSE)"},{"path":"/reference/close2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"close2 — close2","text":"kind Vector, among c(\"windows\", \"quartz\", \"x11\", \"X11\", \"pdf\", \"bmp\", \"png\", \"tiff\"), indicating kind graphic windows (devices) close. BEWARE: either \"windows\", \"quartz\", \"x11\" \"X11\" means X11 GUI graphics devices closed, whatever OS used. return.text Single logical value. Print text regarding kind parameter devices finally closed?","code":""},{"path":"/reference/close2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"close2 — close2","text":"Text regarding kind parameter devices finally closed.","code":""},{"path":"/reference/close2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"close2 — close2","text":"","code":"if (FALSE) { # Screen devices (windows(), quartz() and x11()) should not be used in examples postscript(NULL) # open a postscript graphic device pdf(NULL) # open a pdf graphic device postscript(NULL) # open a postscript graphic device pdf(NULL) # open a pdf graphic device grDevices::dev.list() ;  close2(kind = c(\"pdf\"), return.text = TRUE) ;  grDevices::dev.list() # only remains the postscript devices grDevices::graphics.off() }"},{"path":"/reference/empty_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"empty_graph — empty_graph","title":"empty_graph — empty_graph","text":"Display empty plot text middle window (instance specify plot can drawn).","code":""},{"path":"/reference/empty_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"empty_graph — empty_graph","text":"","code":"empty_graph(text = NULL, text.size = 1, title = NULL, title.size = 1.5)"},{"path":"/reference/empty_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"empty_graph — empty_graph","text":"text Single character string message display. text.size Single numeric value text size. title Single character string graph title. title.size Single numeric value title size (points).","code":""},{"path":"/reference/empty_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"empty_graph — empty_graph","text":"empty plot.","code":""},{"path":"/reference/empty_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"empty_graph — empty_graph","text":"","code":"# simple example  empty_graph(text = \"NO GRAPH\")    # white page  empty_graph() # white page    # all the arguments  empty_graph(text = \"NO GRAPH\", text.size = 2, title = \"GRAPH1\", title.size = 1)"},{"path":"/reference/inter_ticks.html","id":null,"dir":"Reference","previous_headings":"","what":"inter_ticks — inter_ticks","title":"inter_ticks — inter_ticks","text":"Define coordinates values secondary ticks.","code":""},{"path":"/reference/inter_ticks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inter_ticks — inter_ticks","text":"","code":"inter_ticks(lim, log = \"log10\", breaks = NULL, n = NULL, warn.print = TRUE)"},{"path":"/reference/inter_ticks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inter_ticks — inter_ticks","text":"lim Vector 2 numbers indicating limit range axis. Order 2 values matters (inverted axis). log argument \"log2\" \"log10\", values lim must already log transformed. Thus, negative zero values allowed. log Single character string. Either \"log2\" (values lim argument log2 transformed) \"log10\" (values lim argument log10 transformed), \"\". breaks Mandatory vector numbers indicating main ticks values/positions log argument \"\". Ignored log argument \"log2\" \"log10\". n Single numeric value indicating number secondary ticks main tick log argument \"\". Ignored log argument \"log2\" \"log10\". warn.print Single logical value. Print potential warning messages end execution? FALSE, warning messages never printed, can still recovered returned list.","code":""},{"path":"/reference/inter_ticks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inter_ticks — inter_ticks","text":"list containing : - $log: value log argument used. - $coordinates: coordinates secondary ticks axis, lim values. - $values: corresponding values associated coordinate (log scale, 2^$values 10^$values equivalent labels axis). - $warn: potential warning messages. Use cat() proper display. NULL warning.","code":""},{"path":"/reference/inter_ticks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inter_ticks — inter_ticks","text":"","code":"# no log scale  inter_ticks(lim = c(-4,4), log = \"no\", breaks = c(-2, 0, 2), n = 3) #> $log #> [1] \"no\" #>  #> $coordinates #>  [1] -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0 #> [16]  3.5  4.0 #>  #> $values #>  [1] -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0 #> [16]  3.5  4.0 #>  #> $warn #> NULL #>  inter_ticks(lim = c(10, 0), log = \"no\", breaks = c(10, 8, 6, 4, 2, 0), n = 4) #> $log #> [1] \"no\" #>  #> $coordinates #>  [1] 10.0  9.6  9.2  8.8  8.4  8.0  7.6  7.2  6.8  6.4  6.0  5.6  5.2  4.8  4.4 #> [16]  4.0  3.6  3.2  2.8  2.4  2.0  1.6  1.2  0.8  0.4  0.0 #>  #> $values #>  [1] 10.0  9.6  9.2  8.8  8.4  8.0  7.6  7.2  6.8  6.4  6.0  5.6  5.2  4.8  4.4 #> [16]  4.0  3.6  3.2  2.8  2.4  2.0  1.6  1.2  0.8  0.4  0.0 #>  #> $warn #> NULL #>    # log2  inter_ticks(lim = c(-4,4), log = \"log2\") #> $log #> [1] \"log2\" #>  #> $coordinates #>  [1] -4.0000000 -3.4150375 -3.0000000 -2.6780719 -2.4150375 -2.1926451 #>  [7] -2.0000000 -1.8300750 -1.6780719 -1.4150375 -1.1926451 -1.0000000 #> [13] -0.8300750 -0.6780719 -0.4150375 -0.1926451  0.0000000  0.1699250 #> [19]  0.3219281  0.5849625  0.8073549  1.0000000  1.1699250  1.3219281 #> [25]  1.5849625  1.8073549  2.0000000  2.1699250  2.3219281  2.5849625 #> [31]  2.8073549  3.0000000  3.1699250  3.3219281  3.5849625  3.8073549 #> [37]  4.0000000 #>  #> $values #>  [1]  0.06250  0.09375  0.12500  0.15625  0.18750  0.21875  0.25000  0.28125 #>  [9]  0.31250  0.37500  0.43750  0.50000  0.56250  0.62500  0.75000  0.87500 #> [17]  1.00000  1.12500  1.25000  1.50000  1.75000  2.00000  2.25000  2.50000 #> [25]  3.00000  3.50000  4.00000  4.50000  5.00000  6.00000  7.00000  8.00000 #> [33]  9.00000 10.00000 12.00000 14.00000 16.00000 #>  #> $warn #> NULL #>    # log10  inter_ticks(lim = c(-2,3), log = \"log10\") #> $log #> [1] \"log10\" #>  #> $coordinates #>  [1] -2.00000000 -1.69897000 -1.52287875 -1.39794001 -1.30103000 -1.22184875 #>  [7] -1.15490196 -1.09691001 -1.04575749 -1.00000000 -0.69897000 -0.52287875 #> [13] -0.39794001 -0.30103000 -0.22184875 -0.15490196 -0.09691001 -0.04575749 #> [19]  0.00000000  0.30103000  0.47712125  0.60205999  0.69897000  0.77815125 #> [25]  0.84509804  0.90308999  0.95424251  1.00000000  1.30103000  1.47712125 #> [31]  1.60205999  1.69897000  1.77815125  1.84509804  1.90308999  1.95424251 #> [37]  2.00000000  2.30103000  2.47712125  2.60205999  2.69897000  2.77815125 #> [43]  2.84509804  2.90308999  2.95424251  3.00000000 #>  #> $values #>  [1] 1e-02 2e-02 3e-02 4e-02 5e-02 6e-02 7e-02 8e-02 9e-02 1e-01 2e-01 3e-01 #> [13] 4e-01 5e-01 6e-01 7e-01 8e-01 9e-01 1e+00 2e+00 3e+00 4e+00 5e+00 6e+00 #> [25] 7e+00 8e+00 9e+00 1e+01 2e+01 3e+01 4e+01 5e+01 6e+01 7e+01 8e+01 9e+01 #> [37] 1e+02 2e+02 3e+02 4e+02 5e+02 6e+02 7e+02 8e+02 9e+02 1e+03 #>  #> $warn #> NULL #>"},{"path":"/reference/internal_function.html","id":null,"dir":"Reference","previous_headings":"","what":".pack_and_function_check — .pack_and_function_check","title":".pack_and_function_check — .pack_and_function_check","text":"Check 1) required functions present required packages 2) required packages installed locally.","code":""},{"path":"/reference/internal_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".pack_and_function_check — .pack_and_function_check","text":"","code":".pack_and_function_check(fun, lib.path, external.function.name)"},{"path":"/reference/internal_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".pack_and_function_check — .pack_and_function_check","text":"fun Character vector names required functions, preceded name package belong double colon. Example: c(\"ggplot2::geom_point\", \"grid::gpar\"). lib.path Character vector specifying absolute pathways directories containing listed packages fun argument, default directories. NULL, function checks .libPaths() default R library folders. external.function.name Name function using .pack_and_function_check() function.","code":""},{"path":"/reference/internal_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".pack_and_function_check — .pack_and_function_check","text":"error message least one checked packages missing lib.path, least one checked functions missing required package, nothing otherwise.","code":""},{"path":"/reference/internal_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":".pack_and_function_check — .pack_and_function_check","text":"","code":"# .pack_and_function_check(fun = \"ggplot2::notgood\") # commented because this example returns an error if (FALSE) { # Example that shouldn't be run because this is an internal function .pack_and_function_check(fun = c(\"ggplot2::geom_point\", \"grid::gpar\")) }"},{"path":"/reference/open2.html","id":null,"dir":"Reference","previous_headings":"","what":"open2 — open2","title":"open2 — open2","text":"Open pdf screen (GUI) graphic window return initial graphic parameters. order can used: width() open2() prior_plot() # ggplot2 plot() plotting post_plot() prior_plot() used # ggplot2 close2()","code":""},{"path":"/reference/open2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open2 — open2","text":"","code":"open2(   pdf = TRUE,   pdf.path = \"working.dir\",   pdf.name = \"graph\",   width = 7,   height = 7,   paper = \"special\",   pdf.overwrite = FALSE,   rescale = \"fixed\",   remove.read.only = TRUE,   return.output = FALSE )"},{"path":"/reference/open2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"open2 — open2","text":"pdf Single logical value. Use pdf display? FALSE, GUI opened. pdf.path Single character string. pdf saved (terminate / \\). Write \"working.dir\" working directory required (default). Ignored pdf == FALSE. pdf.name Single character string. Name pdf file containing graphs (.pdf extension added function, detected name end). Ignored pdf == FALSE. width Single positive numeric value indicating width window (inches). height Single positive numeric value indicating height window (inches). paper Single character string. Paper argument pdf function (paper format). used pdf(). Either \"a4\", \"letter\", \"legal\", \"us\", \"executive\", \"a4r\", \"USr\" \"special\". \"special\", means paper dimension width height. another paper format, width height size paper, width height modified plot adjusted paper dimension (see $dim returned list see modified dimensions). Ignored pdf == FALSE. pdf.overwrite Single logical value. Existing pdf can overwritten? . Ignored pdf == FALSE. rescale Kind GUI. Either \"R\", \"fit\", \"fixed\". Ignored Mac Linux OS. See ?windows details. remove.read.Single logical value. Remove read (R.O.) graphical parameters? TRUE, graphical parameters returned without R.O. parameters. returned $ini.par list can used set par() new graphical device. FALSE, graphical parameters returned R.O. parameters, provides information like text dimension (see ?par() ). returned $ini.par list can used set par() new graphical device, generate warning message. Ignored return.output == FALSE. return.output Single logical value. Return output ? TRUE output list displayed.","code":""},{"path":"/reference/open2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"open2 — open2","text":"list containing: - $pdf.loc: path pdf created. - $ini.par: initial par() parameters. - $zone.ini: initial window spliting. - $dim: dimension graphical device (inches).","code":""},{"path":"/reference/open2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"open2 — open2","text":"WARNINGS Linux, use pdf = TRUE, (GUI) graphic window always available, meaning X installed (clusters instance). Use X11() R test available.","code":""},{"path":"/reference/open2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"open2 — open2","text":"","code":"if (FALSE) { # Screen devices should not be used in examples open2(pdf = FALSE, pdf.path = \".\", pdf.name = \"graph\", width = 7, height = 7, paper = \"special\", pdf.overwrite = FALSE, return.output = TRUE) }"},{"path":"/reference/post_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"post_plot — post_plot","title":"post_plot — post_plot","text":"Redesign axis. x.side = 0, y.side = 0, function just adds text topright graph reset par() next graphics provides outputs (see ). Provide also positions legend additional text graph. Use prior_plot() function initial inactivation axis drawings.","code":""},{"path":"/reference/post_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"post_plot — post_plot","text":"","code":"post_plot(   x.side = 0,   x.log.scale = FALSE,   x.categ = NULL,   x.categ.pos = NULL,   x.lab = \"\",   x.axis.size = 1.5,   x.label.size = 1.5,   x.dist.legend = 0.5,   x.nb.inter.tick = 1,   y.side = 0,   y.log.scale = FALSE,   y.categ = NULL,   y.categ.pos = NULL,   y.lab = \"\",   y.axis.size = 1.5,   y.label.size = 1.5,   y.dist.legend = 0.5,   y.nb.inter.tick = 1,   text.angle = 90,   tick.length = 0.5,   sec.tick.length = 0.3,   bg.color = NULL,   grid.lwd = NULL,   grid.col = \"white\",   corner.text = \"\",   corner.text.size = 1,   just.label.add = FALSE,   par.reset = FALSE,   custom.par = NULL )"},{"path":"/reference/post_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"post_plot — post_plot","text":"x.side Single integer value indicating axis bottom (1) top (3) region figure. Write 0 change. x.log.scale Single logical value. Log scale x-axis? x.categ Vector character indicating categories x-axis qualitative(stripchart, boxplot). x.categ.pos Numeric vector identical length x.categ indicating position categories names. NULL, 1:length(levels()). x.lab Single character string label x-axis. x.side == 0 x.lab != \"\", x.lab printed. x.axis.size Single positive numeric value increase decrease size x axis numbers. Value 1 change , 0.5 decreases half, 2 increases 2. Also control size displayed categories. x.label.size Single positive numeric value increase decrease size x axis legend text. Value 1 change , 0.5 decreases half, 2 increases 2. x.dist.legend Single positive numeric value move x-axis legends away (first number mgp argument par() inches). x.nb.inter.tick Single positive integer value indicating number secondary ticks main ticks x-axis (log scale). 0 means secondary ticks. y.side Single integer either 0, 2 4 value display axis left (2) right (4) region figure. Write 0 change. y.log.scale Single logical value. Log scale y-axis? y.categ Vector character indicating categories y-axis qualitative(stripchart, boxplot). y.categ.pos Numeric vector identical length y.categ indicating position categories names. NULL, 1:length(levels()). y.lab Label y-axis. y.side == 0 y.lab != \"\", y.lab printed. y.axis.size Single positive numeric value increase decrease size y axis numbers. Value 1 change , 0.5 decreases half, 2 increases 2. Also control size displayed categories. y.label.size Single positive numeric value increase decrease size y axis legend text. Value 1 change , 0.5 decreases half, 2 increases 2. y.dist.legend Single positive numeric value move y-axis legends away (first number mgp argument par() inches). y.nb.inter.tick Single positive integer value indicating number secondary ticks main ticks y-axis (log scale). 0 means secondary ticks. text.angle Single numeric value angle text axis qualitative. tick.length Single positive proportion value indicating length main ticks (1 means complete distance plot region axis numbers, 0.5 means half length, etc., 0 ticks). sec.tick.length Single positive proportion value indicating length secondary ticks (1 means complete distance plot region axis numbers, 0.5 means half length, etc., 0 ticks). bg.color Background color plot region. Either (1) NULL (color), (2) single character string integer. Color can color name (see ?colors() R), hexadecimal color code, integer (according palette()). BEWARE: cover/hide existing plot ! grid.lwd Vector positive numeric values. non NULL, activate grid lines specify line widths. grid.col Grid line colors (grid.lwd non NULL). Either (1) NULL (color), (2) vector character strings integers. Color can color names (see ?colors() R), hexadecimal color codes, integers (according palette()). corner.text Single character string adding text top right corner window. corner.text.size Single positive numeric value increase decrease size text. Value 1 change , 0.5 decreases half, 2 increases 2. just.label.add Single logical value just add axis labels (legend). TRUE, least (x.side == 0 & x.lab != \"\") (y.side == 0 & y.lab != \"\") must set display corresponding x.lab y.lab. par.reset Single logical value resets graphics parameters. BEWARE: TRUE can generate display problems, mainly graphic devices multiple figure regions. custom.par List provides parameters reset graphics parameters. BEWARE: NULL par.reset == TRUE, default par() parameters used.","code":""},{"path":"/reference/post_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"post_plot — post_plot","text":"list containing: - $x.mid.left.dev.region: middle left margin device region, coordinates x-axis. - $x.left.dev.region: left side left margin (including potential margin device region), coordinates x-axis. - $x.mid.right.dev.region: middle right margin device region, coordinates x-axis. - $x.right.dev.region: right side right margin (including potential margin device region), coordinates x-axis. - $x.mid.left.fig.region: middle left margin figure region, coordinates x-axis. - $x.left.fig.region: left side left margin, coordinates x-axis. - $x.mid.right.fig.region: middle right margin figure region, coordinates x-axis. - $x.right.fig.region: right side right margin, coordinates x-axis. - $x.left.plot.region: left side plot region, coordinates x-axis. - $x.right.plot.region: right side plot region, coordinates x-axis. - $x.mid.plot.region: middle plot region, coordinates x-axis. - $y.mid.bottom.dev.region: middle bottom margin device region, coordinates y-axis. - $y.bottom.dev.region: bottom side bottom margin (including potential margin device region), coordinates y-axis. - $y.mid.top.dev.region: middle top margin device region, coordinates y-axis. - $y.top.dev.region: top side top margin (including potential margin device region), coordinates y-axis. - $y.mid.bottom.fig.region: middle bottom margin figure region, coordinates y-axis. - $y.bottom.fig.region: bottom bottom margin figure region, coordinates y-axis. - $y.mid.top.fig.region: middle top margin figure region, coordinates y-axis. - $y.top.fig.region: top top margin figure region, coordinates y-axis. - $y.top.plot.region: top plot region, coordinates y-axis. - $y.bottom.plot.region: bottom plot region, coordinates y-axis. - $y.mid.plot.region: middle plot region, coordinates y-axis. - $text: warning text","code":""},{"path":"/reference/post_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"post_plot — post_plot","text":"","code":"if (FALSE) { # Screen devices should not be used in examples  # Example of log axis with redrawn x-axis and y-axis:  prior.par <- prior_plot(param.reinitial = TRUE) ;  plot(1:100) ;  post_plot(x.side = 1, x.lab = \"Values\", y.side = 2, y.lab = \"TEST\", y.axis.size = 1, y.label.size = 2, y.dist.legend = 0.6) }"},{"path":"/reference/prior_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"prior_plot — prior_plot","title":"prior_plot — prior_plot","text":"convenient erase axes post plot axis redrawing using post_plot(). Reinitialize set graphic parameters plotting. used graphic device already opened.","code":""},{"path":"/reference/prior_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prior_plot — prior_plot","text":"","code":"prior_plot(   param.reinitial = FALSE,   xlog.scale = FALSE,   ylog.scale = FALSE,   remove.label = TRUE,   remove.x.axis = TRUE,   remove.y.axis = TRUE,   std.x.range = TRUE,   std.y.range = TRUE,   down.space = 1,   left.space = 1,   up.space = 1,   right.space = 1,   orient = 1,   dist.legend = 3.5,   tick.length = 0.5,   box.type = \"n\",   amplif.label = 1,   amplif.axis = 1,   display.extend = FALSE,   return.par = FALSE )"},{"path":"/reference/prior_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prior_plot — prior_plot","text":"param.reinitial Single logical value. Reinitialize graphic parameters applying new ones, defined arguments? Either TRUE FALSE. xlog.scale Single logical value. Log scale x-axis? Either TRUE FALSE. TRUE, erases x-axis, except legend, drawing post_plot()(xlog argument par()). ylog.scale Single logical value. Log scale y-axis? Either TRUE FALSE. TRUE, erases y-axis, except legend, drawing post_plot()(ylog argument par()). remove.label Single logical value. Remove labels (axis legend) two axes? Either TRUE FALSE (ann argument par()). remove.x.axis Single logical value. Remove x-axis except legend? Either TRUE FALSE (control xaxt argument par()). Automately set TRUE xlog.scale == TRUE. remove.y.axis Single logical value. Remove y-axis except legend? Either TRUE FALSE (control yaxt argument par()). Automately set TRUE ylog.scale == TRUE. std.x.range Single logical value. Standard range x-axis? TRUE (range extend) FALSE (4% range extend). Controls xaxs argument par() (TRUE xaxs = \"\", FALSE xaxs = \"r\"). std.y.range Single logical value. Standard range y-axis? TRUE (range extend) FALSE (4% range extend). Controls yaxs argument par() (TRUE yaxs = \"\", FALSE yaxs = \"r\"). .space Single positive numeric value indicating lower vertical margin (inches, mai argument par()). left.space Single positive numeric value indicating left horizontal margin (inches, mai argument par()). .space Single positive numeric value indicating upper vertical margin plot region grapical window (inches, mai argument par()). right.space Single positive numeric value indicating right horizontal margin (inches, mai argument par()). orient Single positive numeric value indicating scale number orientation (las argument par()). 0, always parallel axis; 1, always horizontal; 2, always perpendicular axis; 3, always vertical. dist.legend Single positive numeric value moves axis legends away inches (first number mgp argument par() inches thus / 0.2). tick.length Single positive numeric value indicating length ticks (1 means complete distance plot region axis numbers, 0.5 means half length, etc. 0 means tick. box.type bty argument par(). Either \"o\", \"l\", \"7\", \"c\", \"u\", \"]\", resulting box resembles corresponding upper case letter. value \"n\" suppresses box. amplif.label Single positive numeric value increase decrease size text legends. amplif.axis Single positive numeric value increase decrease size scale numbers axis. display.extend Single logical value. Extend display beyond plotting region? Either TRUE FALSE (xpd argument par() without NA). return.par Single logical value. Return graphic parameter modification?","code":""},{"path":"/reference/prior_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prior_plot — prior_plot","text":"Graphic parameter modification.","code":""},{"path":"/reference/prior_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prior_plot — prior_plot","text":"","code":"if (FALSE) { # Screen devices should not be used in examples prior_plot(param.reinitial = FALSE, xlog.scale = FALSE, ylog.scale = FALSE, remove.label = TRUE, remove.x.axis = TRUE, remove.y.axis = TRUE, std.x.range = TRUE, std.y.range = TRUE, down.space = 1, left.space = 1, up.space = 1, right.space = 1, orient = 1, dist.legend = 4.5, tick.length = 0.5, box.type = \"n\", amplif.label = 1, amplif.axis = 1, display.extend = FALSE, return.par = FALSE) }"},{"path":"/reference/scale2.html","id":null,"dir":"Reference","previous_headings":"","what":"scale2 — scale2","title":"scale2 — scale2","text":"Attempt select nice scale numbers setting n ticks lim axis range.","code":""},{"path":"/reference/scale2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scale2 — scale2","text":"","code":"scale2(n, lim, kind = \"approx\", lib.path = NULL)"},{"path":"/reference/scale2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scale2 — scale2","text":"n Single positive non null integer value indicating desired number main ticks axis. lim Vector 2 numbers indicating limit range axis. Order 2 values matters (inverted axis). Can log transformed values. kind Single character string. Either \"approx\" (approximative), \"strict\" (strict) \"strict.cl\" (strict clean). \"approx\", use scales::trans_breaks() function provide easy read scale approximately n ticks spanning range lim argument. \"strict\", cut range lim argument n + 1 equidistant part return n numbers boundary. often generates numbers uneasy read. \"strict.cl\", provide easy read scale exactly n ticks, sometimes completely spanning range lim argument. lib.path Character vector specifying absolute pathways directories containing required packages default directories. Ignored NULL.","code":""},{"path":"/reference/scale2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scale2 — scale2","text":"vector numbers.","code":""},{"path":"/reference/scale2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scale2 — scale2","text":"","code":"# approximate number of main ticks  ymin = 2 ;  ymax = 3.101 ;  n = 5 ;  scale <- scale2(n = n, lim = c(ymin, ymax), kind = \"approx\") ;  scale ;  #> [1] 2.0 2.2 2.4 2.6 2.8 3.0 par(yaxt = \"n\", yaxs = \"i\", las = 1) ;  plot(ymin:ymax, ymin:ymax, xlim = base::range(scale, ymin, ymax)[order(c(ymin, ymax))], ylim = base::range(scale, ymin, ymax)[order(c(ymin, ymax))], xlab = \"DEFAULT SCALE\", ylab = \"NEW SCALE\") ; par(yaxt = \"s\") ;  axis(side = 2, at = scale)"},{"path":"/reference/width.html","id":null,"dir":"Reference","previous_headings":"","what":"width — width","title":"width — width","text":"Rescale width window open depending number categories qualitative variable plot x-axis. Can used height, considering width. order can used: width() open() prior_plot() # ggplot2 plot() plotting post_plot() prior_plot() used # ggplot2 close()","code":""},{"path":"/reference/width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"width — width","text":"","code":"width(   categ.nb,   inches.per.categ.nb = 1,   ini.window.width = 7,   inch.left.space,   inch.right.space,   boundarie.space = 0.5 )"},{"path":"/reference/width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"width — width","text":"categ.nb Single positive numeric value number categories plot. inches.per.categ.nb Single positive numeric value inches per unit categ.nb. 2 means 2 inches boxplot instance. ini.window.width Single positive numeric value indicating initial Window width (inches). inch.left.space Single positive numeric value indicating left horizontal margin figure region (inches). inch.right.space Single positive numeric value indicating right horizontal margin figure region (inches). boundarie.space Single positive numeric value indicating space right left limits plotting region plot (0.5 means half category width). empty categories added right left plot.","code":""},{"path":"/reference/width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"width — width","text":"new window width inches.","code":""},{"path":"/reference/width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"width — width","text":"","code":"width(categ.nb = 10, inches.per.categ.nb = 0.2, ini.window.width = 7, inch.left.space = 1, inch.right.space = 1, boundarie.space = 0.5) #> [1] 4"}]
